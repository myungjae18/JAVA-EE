/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-02-28 06:19:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import notice.model.Notice;
import notice.model.NoticeDAO;

public final class content_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	NoticeDAO noticeDAO=new NoticeDAO();


	//메세지를 보여주고 지정한 url 요청
	public String showMsgUrl(){
		return null;		
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/header.jsp", Long.valueOf(1551332656259L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("notice.model.Notice");
    _jspx_imports_classes.add("notice.model.NoticeDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

	int notice_id=Integer.parseInt(request.getParameter("notice_id"));
	Notice notice=noticeDAO.select(notice_id);
	int result=noticeDAO.increment(notice);
	if(result==0){
		out.print("조회 수 증가 실패..");
	}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<title>나의 완벽 게시판~</title>");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("\tfont-family: Arial, Helvetica, sans-serif;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("\tpadding: 12px;\r\n");
      out.write("\tborder: 1px solid #ccc;\r\n");
      out.write("\tborder-radius: 4px;\r\n");
      out.write("\tbox-sizing: border-box;\r\n");
      out.write("\tmargin-top: 6px;\r\n");
      out.write("\tmargin-bottom: 16px;\r\n");
      out.write("\tresize: vertical;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=button] {\r\n");
      out.write("\tbackground-color: #4CAF50;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tpadding: 12px 20px;\r\n");
      out.write("\tborder: none;\r\n");
      out.write("\tborder-radius: 4px;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("\tbackground-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("\tborder-radius: 5px;\r\n");
      out.write("\tbackground-color: #f2f2f2;\r\n");
      out.write("\tpadding: 20px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"//cdn.ckeditor.com/4.11.3/standard/ckeditor.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\tinit();\r\n");
      out.write("});\r\n");
      out.write("function init() {\r\n");
      out.write("\tCKEDITOR.replace('content');\r\n");
      out.write("\t$(\"#bt_edit\").click(function(){\r\n");
      out.write("\t\tedit();\r\n");
      out.write("\t});\r\n");
      out.write("\t$(\"#bt_del\").click(function(){\r\n");
      out.write("\t\tdel();\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function edit(){\r\n");
      out.write("\t//수정 동의 안하면 함수 빠져나가기\r\n");
      out.write("\tif(!confirm(\"수정하시겠습니까?\")){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"form\").attr({\r\n");
      out.write("\t\t\"method\":\"post\",\r\n");
      out.write("\t\t\"action\":\"/notice/edit.jsp\"\r\n");
      out.write("\t});\r\n");
      out.write("\t$(\"form\").submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function del(){\r\n");
      out.write("\t//삭제 동의 안하면 함수 빠져나가기\r\n");
      out.write("\tif(!confirm(\"삭제하시겠습니까?\")){\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"form\").attr({\r\n");
      out.write("\t\t\"method\":\"post\",\r\n");
      out.write("\t\t\"action\":\"/notice/delete.jsp\"\r\n");
      out.write("\t});\r\n");
      out.write("\t$(\"form\").submit();\r\n");
      out.write("}\t\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body onLoad=\"init()\">\r\n");
      out.write("\r\n");
      out.write("\t<h3>Show Detail</h3>\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"container\">\r\n");
      out.write("\t\t<form>\r\n");
      out.write("\t\t\t<input type=\"hidden\" id=\"name\" name=\"notice_id\" value=\"");
      out.print(notice.getNotice_id());
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"fname\" name=\"writer\" value=\"");
      out.print(notice.getWriter());
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"lname\" name=\"title\" value=\"");
      out.print(notice.getTitle());
      out.write("\">\r\n");
      out.write("\t\t\t<textarea id=\"content\" name=\"content\" style=\"height: 200px\">\r\n");
      out.write("\t\t\t");
      out.print(notice.getContent());
      out.write("\r\n");
      out.write("\t\t\t</textarea>\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"bt_edit\" value=\"Edit\">\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"bt_del\" value=\"Delete\">\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"bt_list\" value=\"List\" onClick=\"location.href='/notice/list.jsp'\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
