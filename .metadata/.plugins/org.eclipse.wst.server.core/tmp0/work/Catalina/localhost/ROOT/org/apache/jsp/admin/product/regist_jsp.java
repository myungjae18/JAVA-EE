/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-03-19 01:56:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.fashion.model.domain.Subcategory;
import java.io.File;
import com.fashion.common.FileManager;
import com.fashion.model.repository.ProductDAO;
import com.fashion.model.domain.Product;
import com.oreilly.servlet.MultipartRequest;

public final class regist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

ProductDAO productDAO = new ProductDAO();
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.fashion.model.repository.ProductDAO");
    _jspx_imports_classes.add("com.fashion.common.FileManager");
    _jspx_imports_classes.add("com.fashion.model.domain.Subcategory");
    _jspx_imports_classes.add("com.fashion.model.domain.Product");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	//넘겨받은 파라미터 값을 이용해서 오라클 데이터베이스에 등록 및 파일 처리를 한다
	//모든 작업 후, 목록으로... 업로드는 클라이언트가 보낸 텍스트 파라미터 뿐만 아니라, 일반 바이너리 파일이 포함되므로 기존 request.getParameter() 로는 처리가 불가...
	//스트림 처리가 포함되어야함...따라서 개발자가 직접 코드를 작성하면 생산성이 떨어지므로 잘 만들어진 외부 라이브러리르 이용하자!
	//오레일리사의 cos.jar , apache의 commons fileupload를 경험해본다
	//cos jar는 생성자에서 이미 업로드가 완료된다!!

	//getRealPath() 사용 이유? 웹 어플리케이션이 특정 os에서 수행되는 것을 방지하기 위함..즉 특정 자원의 풀 경로를 하드코딩 하지말고, 해당 시스템의 환경에 따라 동적으로 구하여 처리하자!!
	//윈도우, 리눅스에 맞게...
	String saveDir = application.getRealPath("/data"); //저장경로
	out.print(saveDir + "<br>");
	int maxSize = 5 * 1024 * 1024; //업로드 용량 제한 3MB
	String encoding = "utf-8";

	MultipartRequest multi = new MultipartRequest(request, saveDir, maxSize, encoding);
	//함께 전송되어온 파라미터를 받으려면 평상시의 request.getParameter() 동작 불가
	String subcategory_id = multi.getParameter("subcategory_id");
	String product_name = multi.getParameter("product_name");
	String price = multi.getParameter("price");
	String detail = multi.getParameter("detail");

	out.print(subcategory_id + "<br>");
	out.print(product_name + "<br>");
	out.print(price + "<br>");
	out.print(detail + "<br>");

	Product product = new Product(); //파라미터 담을 dummy dto
	Subcategory subcategory = new Subcategory();

	subcategory.setSubcategory_id(Integer.parseInt(subcategory_id));
	product.setSubcategory(subcategory);

	product.setProduct_name(product_name);
	product.setPrice(Integer.parseInt(price));
	product.setDetail(detail);
	product.setFilename(multi.getOriginalFileName("myFile"));

	/*
	   db에 넣기에 앞서, 파일명을 개발자가 지정한 규칙으로 변경한다
	   2019013912312311.jpg
	*/
	long time = System.currentTimeMillis();
	String ext = FileManager.getExt(multi.getOriginalFileName("myFile"));
	String destFile = time + "." + ext;
	out.print("최종 파일명은" + destFile);

	//실제 저장되어 있는 파이르이 이름을 변경해야 한다!!
	File file = multi.getFile("myFile");
	file.renameTo(new File(saveDir + "/" + destFile));
	product.setFilename(destFile); //DTO의 파일명 교체

	int result = productDAO.insert(product);

	//list 요청
	response.sendRedirect("/admin/product/list.jsp");

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
