/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-03-22 04:13:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import com.fashion.model.domain.Product;
import com.fashion.model.domain.OrderDetail;
import com.fashion.model.repository.OrderDetailDAO;
import com.fashion.model.repository.OrderSummaryDAO;
import com.fashion.model.domain.OrderSummary;
import com.fashion.model.domain.Customer;
import com.fashion.common.Formatter;
import com.fashion.model.domain.Paymethod;

public final class pay_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

OrderSummaryDAO summaryDAO = new OrderSummaryDAO();
	OrderDetailDAO detailDAO = new OrderDetailDAO();
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/header.jsp", Long.valueOf(1552957629537L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.fashion.model.repository.OrderSummaryDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.fashion.model.repository.OrderDetailDAO");
    _jspx_imports_classes.add("com.fashion.common.Formatter");
    _jspx_imports_classes.add("com.fashion.model.domain.Customer");
    _jspx_imports_classes.add("com.fashion.model.domain.OrderSummary");
    _jspx_imports_classes.add("com.fashion.model.domain.Product");
    _jspx_imports_classes.add("com.fashion.model.domain.Paymethod");
    _jspx_imports_classes.add("com.fashion.model.domain.OrderDetail");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write('\n');

	String topcategory_id=request.getParameter("topcategory_id");
	//out.print("넘겨받은 상위 카테고리의 id값은 "+topcategory_id);
	
	//파라미터가 넘어오면, subcategory_id 값을 대체하자!!
	int subcategory_id=1;//기본값..
	if(request.getParameter("subcategory_id")!=null){//넘어오면...
		subcategory_id=Integer.parseInt(request.getParameter("subcategory_id"));
	}

      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("utf-8");

	String[] product_id = request.getParameterValues("product_id");
	String[] ea = request.getParameterValues("ea");
	String total_buy = request.getParameter("total_buy");
	String total_pay = request.getParameter("total_pay");
	String paymethod_id = request.getParameter("paymethod_id");
	String sender = request.getParameter("sender");
	String bank = request.getParameter("bank");
	String email = request.getParameter("email");

	Customer cs = (Customer) session.getAttribute("customer");

	System.out.println("total_buy는 " + total_buy);
	System.out.println("total_pay는 " + total_pay);
	System.out.println("paymethod_id는 " + paymethod_id);
	System.out.println("customer_id는  " + cs.getCustomer_id());
	System.out.println("sender는  " + sender);
	System.out.println("bank는  " + bank);
	System.out.println("email은  " + email);

	//insert
	OrderSummary summary = new OrderSummary();
	Paymethod paymethod = new Paymethod();

	summary.setCustomer(cs);
	summary.setTotal_buy(Integer.parseInt(total_buy));
	summary.setTotal_pay(Integer.parseInt(total_pay));
	paymethod.setPaymethod_id(Integer.parseInt(paymethod_id));
	summary.setPaymethod(paymethod);

	int key = summaryDAO.insert(summary);

	if (key != 0) {
		//주문 상세 정보 입력
		int result=detailDAO.insert(summary, product_id, ea);
		if(result==0){
			out.print("주문 등록 실패");
		}else{
			out.print("주문 등록 성공");
			//장바구니 지우기...
			
			//메일 발송...
		}
	} else {
		out.print("summary 실패");
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
