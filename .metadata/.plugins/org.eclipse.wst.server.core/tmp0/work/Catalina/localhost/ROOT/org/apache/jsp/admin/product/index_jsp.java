/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-03-19 01:51:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.fashion.model.domain.Admin;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/admin/inc/header.jsp", Long.valueOf(1552957627456L));
    _jspx_dependants.put("/admin/inc/head.jsp", Long.valueOf(1552957627425L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.fashion.model.domain.Admin");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');


      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>상품관리</title>\n");
      out.write("<style>\n");
      out.write("body {font-family: Arial, Helvetica, sans-serif;}\n");
      out.write("* {box-sizing: border-box;}\n");
      out.write("\n");
      out.write("input[type=text], select, textarea {\n");
      out.write("  width: 100%;\n");
      out.write("  padding: 12px;\n");
      out.write("  border: 1px solid #ccc;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  box-sizing: border-box;\n");
      out.write("  margin-top: 6px;\n");
      out.write("  margin-bottom: 16px;\n");
      out.write("  resize: vertical;\n");
      out.write("}\n");
      out.write("\n");
      out.write("input[type=button] {\n");
      out.write("  background-color: #4CAF50;\n");
      out.write("  color: white;\n");
      out.write("  padding: 12px 20px;\n");
      out.write("  border: none;\n");
      out.write("  border-radius: 4px;\n");
      out.write("  cursor: pointer;\n");
      out.write("}\n");
      out.write("\n");
      out.write("input[type=button]:hover {\n");
      out.write("  background-color: #45a049;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".container {\n");
      out.write("  border-radius: 5px;\n");
      out.write("  background-color: #f2f2f2;\n");
      out.write("  padding: 20px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/admin/static/css/main-nav.css\"/>\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>");
      out.write("\n");
      out.write("<script>\n");
      out.write("$(function(){\n");
      out.write("\tgetTopList();\n");
      out.write("\t\n");
      out.write("\t$($(\"input[type='button']\")[0]).click(function(){\n");
      out.write("\t\tregist();\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\t$($(\"input[type='button']\")[1]).click(function(){\n");
      out.write("\t\t//location.href=\"list.jsp\";//js\n");
      out.write("\t\t//$(location).attr(\"href\",\"list.jsp\");//속성이 1개일때\n");
      out.write("\t\t$(location).attr({  //속성이 2개이상일때 유용\n");
      out.write("\t\t\thref:\"list.jsp\"\n");
      out.write("\t\t});\n");
      out.write("\t\t\n");
      out.write("\t});\n");
      out.write("});\n");
      out.write("\n");
      out.write("//서버에 등록을 요청한다!!\n");
      out.write("function regist(){\n");
      out.write("\t//서브 카테고리 유효성 체크 \n");
      out.write("\tif($(\"#subcategory_id\").val()==\"0\"){\n");
      out.write("\t\talert(\"하위 분류를 선택하세요\");\n");
      out.write("\t\treturn;\n");
      out.write("\t}\n");
      out.write("\t$(\"form\").attr({\n");
      out.write("\t\t\"method\":\"post\",\n");
      out.write("\t\t\"action\":\"/admin/product/regist.jsp\",\n");
      out.write("\t\t\"enctype\":\"multipart/form-data\"\n");
      out.write("\t});\n");
      out.write("\t$(\"form\").submit();\n");
      out.write("}\n");
      out.write("\n");
      out.write("//최상위 카테고리 가져오기\n");
      out.write("function getTopList(){\n");
      out.write("\t$.ajax({\n");
      out.write("\t\turl:\"/admin/product/topcategory.jsp\",\n");
      out.write("\t\ttype:\"get\",\n");
      out.write("\t\tsuccess:function(result){\n");
      out.write("\t\t\t//서버의 응답이 일반 텍스트 일때는 JSON 객체화 시킴..\n");
      out.write("\t\t\t//var json=JSON.parse(result);\n");
      out.write("\t\t\t//alert(result.topList[0].top_name);\n");
      out.write("\t\t\tcreateOption(result);\n");
      out.write("\t\t},\n");
      out.write("\t\terror:function(result){\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("}\n");
      out.write("\n");
      out.write("//하위 카테고리 목록 요청하기\n");
      out.write("function getSubList(topcategory_id){\n");
      out.write("\t//alert(\"당신이 선택한 상위 id는 \"+topcategory_id);\n");
      out.write("\t$.ajax({\n");
      out.write("\t\turl:\"/admin/product/subcategory.jsp\",\n");
      out.write("\t\ttype:\"post\",\n");
      out.write("\t\tdata:{\n");
      out.write("\t\t\ttopcategory_id:topcategory_id\n");
      out.write("\t\t},\n");
      out.write("\t\tsuccess:function(result){\n");
      out.write("\t\t\tcreateSubOption(result);\n");
      out.write("\t\t},\n");
      out.write("\t\terror:function(result){\n");
      out.write("\t\t\t\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("//동적으로 select박스의 옵션을 생성하는 함수!!\n");
      out.write("function createOption(obj){\n");
      out.write("\t//제이쿼리로 option\n");
      out.write("\t$(\"#topcategory_id\").append(\"<option value=\\\"0\\\">상위카테고리 선택</option>\");\n");
      out.write("\t\n");
      out.write("\tfor(var i=0;i<obj.topList.length;i++){\n");
      out.write("\t\tvar json=obj.topList[i];\n");
      out.write("\t\t$(\"#topcategory_id\").append(\"<option value=\\\"\"+json.topcategory_id+\"\\\">\"+json.top_name+\"</option>\");\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("function createSubOption(obj){\n");
      out.write("\t$(\"#subcategory_id\").html(\"\");//초기화!!!\n");
      out.write("\t\n");
      out.write("\t//제이쿼리로 option\n");
      out.write("\t$(\"#subcategory_id\").append(\"<option value=\\\"0\\\">하위카테고리 선택</option>\");\n");
      out.write("\t\n");
      out.write("\tfor(var i=0;i<obj.subList.length;i++){\n");
      out.write("\t\tvar json=obj.subList[i];\n");
      out.write("\t\t$(\"#subcategory_id\").append(\"<option value=\\\"\"+json.subcategory_id+\"\\\">\"+json.sub_name+\"</option>\");\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write('\n');
      out.write('\n');

	if(session.getAttribute("admin")==null){
		out.print("<script>");
		out.print("alert('올바르지 않은 경로로 접근하였네요');");
		out.print("location.href='/admin/login';");
		out.print("</script>");
	}else{
	//로그인에 성공한 사람이라면, 세션에 무언가 담은 사람이다.
	//따라서 이 요청과 관련된 세션을 세션을 얻어와 그 안에 있는
	//데이터를 끄집어 내서, 로그인 서비스를 제공하자!!
	Admin admin=(Admin)session.getAttribute("admin");
	//out.print("반갑습니다 "+admin.getName()+"님");
	//로그인을 거치지 않고 접근하려는 자는 막자!!!
	//방법?) 로그인을 하지 않았다면,  session 에 객체를 담은 적이 없기 때문에
	//         session.getAttribute("admin") 은 null 임을 이용하자!!
	

      out.write("\n");
      out.write("<div class=\"subnav\">\n");
      out.write("\t");
      out.print(admin.getName());
      out.write("님 반갑습니다\n");
      out.write("\t<a href=\"/admin/login/logout.jsp\">로그아웃</a>\n");
      out.write("</div>\n");
      out.write("<div class=\"topnav\">\n");
      out.write("  <a class=\"active\" href=\"#home\">Home</a>\n");
      out.write("  <a href=\"/admin/store\">상점관리</a>\n");
      out.write("  <a href=\"/admin/sales\">매출관리</a>\n");
      out.write("  <a href=\"/admin/product\">상품관리</a>\n");
      out.write("  <a href=\"/admin/member\">회원관리</a>\n");
      out.write("  <a href=\"/admin/cs\">고객센터</a>\n");
      out.write("</div>\n");
} 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<h3>Contact Form</h3>\n");
      out.write("\n");
      out.write("<div class=\"container\">\n");
      out.write("  <form>\n");
      out.write("    <label for=\"country\">상위 카테고리</label>\n");
      out.write("    <select id=\"topcategory_id\" name=\"topcategory_id\" onChange=\"getSubList(this.value)\">\n");
      out.write("    </select>\n");
      out.write("    \n");
      out.write("    <label for=\"country\">하위 카테고리</label>\n");
      out.write("    <select id=\"subcategory_id\" name=\"subcategory_id\">\n");
      out.write("    </select>\n");
      out.write("  \n");
      out.write("  \n");
      out.write("    <label for=\"fname\">상품명</label>\n");
      out.write("    <input type=\"text\" name=\"product_name\" placeholder=\"Your name..\">\n");
      out.write("\n");
      out.write("    <label for=\"lname\">가격</label>\n");
      out.write("    <input type=\"text\" name=\"price\" placeholder=\"input data by number\">\n");
      out.write("\n");
      out.write("    <label for=\"subject\">상세설명</label>\n");
      out.write("    <textarea  name=\"detail\" placeholder=\"Write something..\" style=\"height:200px\"></textarea>\n");
      out.write("    \n");
      out.write("    <label for=\"subject\">상품사진</label>\n");
      out.write("\t<input type=\"file\" name=\"myFile\" value=\"사진찾기\"/>\n");
      out.write("\t<p>\t\n");
      out.write("    <input type=\"button\" value=\"등록\">\n");
      out.write("    <input type=\"button\" value=\"목록\">\n");
      out.write("  </form>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
