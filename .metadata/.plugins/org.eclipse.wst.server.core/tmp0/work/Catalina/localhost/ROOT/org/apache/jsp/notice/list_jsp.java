/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-02-28 06:06:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.notice;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import notice.model.Notice;
import java.util.List;
import notice.model.NoticeDAO;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


	NoticeDAO noticeDAO=new NoticeDAO();


	//메세지를 보여주고 지정한 url 요청
	public String showMsgUrl(){
		return null;		
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/inc/header.jsp", Long.valueOf(1551332656259L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("notice.model.Notice");
    _jspx_imports_classes.add("notice.model.NoticeDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   \r\n");

	List<Notice> list=noticeDAO.selectAll();
   /*
   하나의 페이지에 모든 레코드를 출력하면 스크롤이 생긴다 (불편함)
   레코드 수를, 페이지당 소정 개수만큼 보여주도록 개발자가 지정하는 기법을
   "paging 처리"라 한다.
   */
   int currentPage=1; //현재 페이지 번호.
   //사용자가 페이지 번호를 눌렀을 경우, currentPage는 그 값으로 대체되어야 한다.
   if(request.getParameter("currentPage")!=null){
      currentPage=Integer.parseInt(request.getParameter("currentPage"));
   }
   int totalRecord=list.size(); //총 레코드 수.
   int pageSize=10; //페이지 당 출력될 레코드 수.
   int totalPage=(int)Math.ceil((float)totalRecord/pageSize); //총 페이지 수. Math.ceil(): 올림
   int blockSize=10; //블록 당 출력될 페이지 수.
   int firstPage=currentPage-(currentPage-1)%blockSize; //블록 당 시작 페이지
   int lastPage=firstPage+(blockSize-1); //블록 당 마지막 페이지
   int curPos=(currentPage-1)*pageSize; //페이지 당 List 내의 시작 index 
   int num=totalRecord-curPos; //페이지 당 게시물 시작 번호.
   
   out.print("currentPage(현재 페이지): "+currentPage+"<br>");
   out.print("totalRecord(총 레코드): "+totalRecord+"<br>");
   out.print("pageSize(페이지당 출력 레코드): "+pageSize+"<br>");
   out.print("totalPage(총 페이지): "+totalPage+"<br>");
   out.print("blockSize(블록당 출력 페이지): "+blockSize+"<br>");
   out.print("firstPage(블록당 시작 페이지): "+firstPage+"<br>");
   out.print("lastPage(블록당 마지막 페이지): "+lastPage+"<br>");
   out.print("페이지 당 시작 index"+curPos+"<br>");
   out.print("num(페이지당 시작 글번호): "+num+"<br>");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<title>나의 완벽 게시판~</title>");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\r\n");
      out.write("   charset=\"UTF-8\">\r\n");
      out.write("<style>\r\n");
      out.write("table {\r\n");
      out.write("   border-collapse: collapse;\r\n");
      out.write("   border-spacing: 0;\r\n");
      out.write("   width: 100%;\r\n");
      out.write("   border: 1px solid #ddd;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("   text-align: left;\r\n");
      out.write("   padding: 16px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:nth-child(even) {\r\n");
      out.write("   background-color: #f2f2f2\r\n");
      out.write("}\r\n");
      out.write(".pageNum{\r\n");
      out.write("   font-size:25px;\r\n");
      out.write("   font-weight:bold;\r\n");
      out.write("   color:blue;\r\n");
      out.write("   \r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("function goContent(notice_id){\r\n");
      out.write("\tlocation.href=\"/notice/content.jsp?notice_id=\"+notice_id;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <table>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <th>번호</th>\r\n");
      out.write("         <th>제목</th>\r\n");
      out.write("         <th>작성자</th>\r\n");
      out.write("         <th>작성일</th>\r\n");
      out.write("         <th>조회수</th>\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
for(int k=1;k<=pageSize;k++){ 
      out.write("\r\n");
      out.write("      ");
if(num<1)break;
      out.write("\r\n");
      out.write("      ");
Notice notice=list.get(curPos++);
      out.write("\r\n");
      out.write("      <tr onClick=\"goContent(");
      out.print(notice.getNotice_id());
      out.write(")\" onmouseover=\"this.style.background='yellow'\" onmouseout=\"this.style.background=''\">\r\n");
      out.write("         <td>");
      out.print(num-- );
      out.write("</td>\r\n");
      out.write("         <td>");
      out.print(notice.getTitle());
      out.write("</td>\r\n");
      out.write("         <td>");
      out.print(notice.getWriter());
      out.write("</td>\r\n");
      out.write("         <td>");
      out.print(notice.getRegdate().substring(0, 10));
      out.write("</td>\r\n");
      out.write("         <td>");
      out.print(notice.getHit());
      out.write("</td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
} 
      out.write("\r\n");
      out.write("      <tr>\r\n");
      out.write("         <td colspan=\"5\" align=\"center\">\r\n");
      out.write("            ");
if(firstPage-1>0){ 
      out.write("\r\n");
      out.write("            <a class=\"pageNum\" href=\"/notice/list.jsp?currentPage=");
      out.print(firstPage-1);
      out.write("\">👈</a>\r\n");
      out.write("            ");
}else{ 
      out.write("\r\n");
      out.write("            <a href=\"javascript:alert('첫 페이지입니다.');\">👈</a>\r\n");
      out.write("            ");
} 
      out.write("\r\n");
      out.write("            ");
for(int k=firstPage;k<=lastPage;k++){ 
      out.write("\r\n");
      out.write("            ");
if(k>totalPage)break; //내가 가진 페이지를 넘어서면 생성을 멈춤.
      out.write("\r\n");
      out.write("            <a");
if(currentPage==k){
      out.write(" class=\"pageNum\"");
}
      out.write(" href=\"/notice/list.jsp?currentPage=");
      out.print(k);
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(k);
      out.write("]</a>\r\n");
      out.write("            ");
} 
      out.write("\r\n");
      out.write("            ");
if(lastPage+1<totalPage){
      out.write("\r\n");
      out.write("            <a href=\"/notice/list.jsp?currentPage=");
      out.print(lastPage+1);
      out.write("\">👉</a>\r\n");
      out.write("            ");
}else{ 
      out.write("\r\n");
      out.write("            <a href=\"javascript:alert('마지막 페이지입니다.');\">👉</a>\r\n");
      out.write("            ");
} 
      out.write("\r\n");
      out.write("         </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("         <td colspan=\"5\">\r\n");
      out.write("            <button onClick=\"location.href='/notice/registform.jsp'\">글쓰기</button>\r\n");
      out.write("         </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("   </table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
